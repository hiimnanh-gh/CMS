// <auto-generated />
using System;
using CMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace test_2.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20250328182012_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CMS.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<decimal>("BookingFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("booking_fee");

                    b.Property<DateTime>("CreatedDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email_address");

                    b.Property<int>("TimeId")
                        .HasColumnType("int")
                        .HasColumnName("time_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId");

                    b.HasIndex("TimeId");

                    b.HasIndex("UserId");

                    b.ToTable("booking");
                });

            modelBuilder.Entity("CMS.Models.BookingSeat", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<int>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    b.HasKey("BookingId", "SeatId");

                    b.HasIndex(new[] { "SeatId", "BookingId" }, "unique_seat_booking")
                        .IsUnique();

                    b.ToTable("booking_seat");
                });

            modelBuilder.Entity("CMS.Models.CastMember", b =>
                {
                    b.Property<int>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cast_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastId"));

                    b.Property<string>("CastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cast_name");

                    b.HasKey("CastId");

                    b.ToTable("cast_member");
                });

            modelBuilder.Entity("CMS.Models.Cinema", b =>
                {
                    b.Property<int>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cinema_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaId"));

                    b.Property<string>("CinemaAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("cinema_address");

                    b.Property<string>("CinemaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cinema_name");

                    b.HasKey("CinemaId");

                    b.ToTable("cinema");
                });

            modelBuilder.Entity("CMS.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("director_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("director_name");

                    b.HasKey("DirectorId");

                    b.ToTable("director");
                });

            modelBuilder.Entity("CMS.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("genre_name");

                    b.HasKey("GenreId");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("CMS.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("AgeRating")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("age_rating");

                    b.Property<string>("BannerText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("banner_text");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("director_id");

                    b.Property<string>("PosterImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("poster_image");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<int?>("RuntimeMin")
                        .HasColumnType("int")
                        .HasColumnName("runtime_min");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Synopsis")
                        .HasColumnType("text")
                        .HasColumnName("synopsis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("TrailerLink")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trailer_link");

                    b.HasKey("MovieId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("StatusId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("CMS.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("movie_genre");
                });

            modelBuilder.Entity("CMS.Models.MovieStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.HasIndex(new[] { "StatusName" }, "UQ__movie_st__501B37536219D8F3")
                        .IsUnique();

                    b.ToTable("movie_status");
                });

            modelBuilder.Entity("CMS.Models.MovieTheatre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int")
                        .HasColumnName("theatre_id");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("MovieId", "TheatreId");

                    b.HasIndex("TheatreId");

                    b.ToTable("movie_theatre");
                });

            modelBuilder.Entity("CMS.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "RoleName" }, "UQ__roles__783254B14599DBE3")
                        .IsUnique()
                        .HasFilter("[role_name] IS NOT NULL");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("CMS.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int")
                        .HasColumnName("seat_number");

                    b.Property<string>("SeatRow")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("seat_row");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("seat_type_id");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int")
                        .HasColumnName("theatre_id");

                    b.HasKey("SeatId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("TheatreId");

                    b.ToTable("seat");
                });

            modelBuilder.Entity("CMS.Models.SeatType", b =>
                {
                    b.Property<int>("SeatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seat_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_name");

                    b.HasKey("SeatTypeId");

                    b.ToTable("seat_type");
                });

            modelBuilder.Entity("CMS.Models.ShowingTime", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("time_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeId"));

                    b.Property<DateTime?>("ShowingDate")
                        .HasColumnType("date")
                        .HasColumnName("showing_date");

                    b.Property<TimeSpan>("ShowingDatetime")
                        .HasColumnType("time")
                        .HasColumnName("showing_datetime");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int")
                        .HasColumnName("theatre_id");

                    b.HasKey("TimeId");

                    b.HasIndex("TheatreId");

                    b.ToTable("showing_time");
                });

            modelBuilder.Entity("CMS.Models.Theatre", b =>
                {
                    b.Property<int>("TheatreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("theatre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreId"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int")
                        .HasColumnName("available_seats");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_id");

                    b.Property<int>("TheatreNum")
                        .HasColumnType("int")
                        .HasColumnName("theatre_num");

                    b.HasKey("TheatreId");

                    b.HasIndex("CinemaId");

                    b.ToTable("theatre");
                });

            modelBuilder.Entity("CMS.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_num");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E6164704975E0")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("CMS.Models.WorkLocation", b =>
                {
                    b.Property<int>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasIndex("CinemaId");

                    b.HasIndex(new[] { "UserId", "CinemaId" }, "unique_user_cinema")
                        .IsUnique();

                    b.ToTable("work_location");
                });

            modelBuilder.Entity("CMS.Models.Booking", b =>
                {
                    b.HasOne("CMS.Models.ShowingTime", "Time")
                        .WithMany("Bookings")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Time");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Models.BookingSeat", b =>
                {
                    b.HasOne("CMS.Models.Booking", "Booking")
                        .WithMany("BookingSeats")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_booking_seat_booking");

                    b.HasOne("CMS.Models.Seat", "Seat")
                        .WithMany("BookingSeats")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK_booking_seat_seat");

                    b.Navigation("Booking");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("CMS.Models.Movie", b =>
                {
                    b.HasOne("CMS.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Models.MovieStatus", "Status")
                        .WithMany("Movies")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CMS.Models.MovieGenre", b =>
                {
                    b.HasOne("CMS.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CMS.Models.MovieTheatre", b =>
                {
                    b.HasOne("CMS.Models.Movie", "Movie")
                        .WithMany("MovieTheatres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Models.Theatre", "Theatre")
                        .WithMany("MovieTheatres")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("CMS.Models.Seat", b =>
                {
                    b.HasOne("CMS.Models.SeatType", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Models.Theatre", "Theatre")
                        .WithMany("Seats")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatType");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("CMS.Models.ShowingTime", b =>
                {
                    b.HasOne("CMS.Models.Theatre", "Theatre")
                        .WithMany("ShowingTimes")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("CMS.Models.Theatre", b =>
                {
                    b.HasOne("CMS.Models.Cinema", "Cinema")
                        .WithMany("Theatres")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("CMS.Models.User", b =>
                {
                    b.HasOne("CMS.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CMS.Models.WorkLocation", b =>
                {
                    b.HasOne("CMS.Models.Cinema", "Cinema")
                        .WithMany()
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Models.Booking", b =>
                {
                    b.Navigation("BookingSeats");
                });

            modelBuilder.Entity("CMS.Models.Cinema", b =>
                {
                    b.Navigation("Theatres");
                });

            modelBuilder.Entity("CMS.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CMS.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("CMS.Models.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("MovieTheatres");
                });

            modelBuilder.Entity("CMS.Models.MovieStatus", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CMS.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CMS.Models.Seat", b =>
                {
                    b.Navigation("BookingSeats");
                });

            modelBuilder.Entity("CMS.Models.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CMS.Models.ShowingTime", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CMS.Models.Theatre", b =>
                {
                    b.Navigation("MovieTheatres");

                    b.Navigation("Seats");

                    b.Navigation("ShowingTimes");
                });

            modelBuilder.Entity("CMS.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
